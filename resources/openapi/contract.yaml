openapi: 3.0.3
info:
  title: Ultimania
  description:
    Webservice for interacting with the Ultimania World Record Database.

    The design is made in a way that allows a player to have more than one record per map. Records and their replays MAY
    be kept.

    TODO explain the general concept of how the API is used. Sending data to players and map endpoint first, then record ...

    TODO charset is UTF-8
  version: 5.0.0
  contact:
    email: enwi2@t-online.de
servers:
  - url: '/api/v5'
paths:
  /maps/{uid}/records:
    get:
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/record_with_player"
        404:
          description: No map found for given UID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error-response"
  /records/{id}/replay:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Replay.Gbx file content (binary)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: No record found for given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error-response"
    post:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              description: Replay.Gbx file content (binary)
              type: string
              format: binary
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                type: object
                properties:
                  - name: replay_available
                    type: boolean
        400:
          description: Invalid replay supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error-response"
        404:
          description: No record or replay found for given ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error-response"

  /records:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record"
      responses:
        200:
          description: Record existed. Updated it if the score has improved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/record"
        201:
          description: Record created, did not exist before.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/record"
        403:
          description: Player is banned, record not saved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error-response"
  /players/{login}:
    get:
      description: Get information about the player
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
        404:
          description: player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error_response"
  /players:
    put:
      description: create the player if not exists, update otherwise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/player"
      responses:
        200:
          description: player information updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
        201:
          description: player created, did not exist before
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
  /maps:
    put:
      description: create the map if not exists, update otherwise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/map"
      responses:
        200:
          description: success, map the player with all information available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/map"

components:
  schemas:
    record:
      type: object
      properties:
        id:
          description: Unique ID, generated by the server. New record = new ID.
          type: string
        player_login:
          type: string
        map_uid:
          type: string
        score:
          type: integer
        replay_available:
          type: boolean
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - score
        - map_uid
        - player_login
    record_with_player:
      type: object
      properties:
        id:
          description: Unique ID, generated by the server.
          type: string
        score:
          type: integer
        map_uid:
          type: string
        player:
          $ref: "#/components/schemas/player"
        replay_available:
          type: boolean
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - score
        - map_uid
        - player_login
    player:
      type: object
      properties:
        login:
          type: string
        nick:
          type: string
        banned:
          type: boolean
        allow_replay_download:
          type: boolean
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - login
        - nick
    map:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - uid
        - name
    date-time:
      type: string
      format: date-time
      description: unix timestamp
      example: 1639075065
    error-response:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              enum:
              - RECORD_NOT_FOUND
              - MAP_NOT_FOUND
              - REPLAY_NOT_FOUND
              - PLAYER_NOT_FOUND
              - BANNED_PLAYER
              - INVALID_REPLAY
            message:
              type: string
          required:
          - code
