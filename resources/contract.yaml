openapi: 3.0.3
info:
  title: Ultimania
  description:
    Webservice for interacting with the Ultimania World Record Database.

    The design is made in a way that allows a player to have more than one record per map. Records and their replays MAY
    be kept.
  version: 5.0.0
  contact:
    email: enwi2@t-online.de
servers:
  - url: '/api/v5' # todo
paths:
  /maps/{uid}/records:
    get:
      parameters:
        - name: uid
          in: path
        - name: limit
          in: query
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/record_with_player"
  /records/{id}/replay:
    get:
      responses:
        200:
          description: Replay.Gbx file content (binary)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      requestBody:
        content:
          application/octet-stream:
            schema:
              description: Replay.Gbx file content (binary)
              type: string
              format: binary
      responses:
        201:
          description: created

  /records:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/record"
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/record"
  /players:
    put:
      description: create the player if not exists, update otherwise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/player"
      responses:
        200:
          description: player information updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
      responses:
        201:
          description: player created, did not exist before
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/player"
  /maps:
    put:
      description: create the map if not exists, update otherwise
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/map"
      responses:
        200:
          description: success, map the player with all information available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/map"

components:
  schemas:
    record:
      type: object
      properties:
        id:
          description: Unique ID, generated by the server. New record = new ID.
          type: string
        player_login:
          type: string
        map_uid:
          type: string
        score:
          type: integer
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - score
        - map_uid
        - player_login
    record_with_player:
      type: object
      properties:
        id:
          description: Unique ID, generated by the server. New record = new ID.
          type: string
        score:
          type: integer
        map_uid:
          type: string
        player:
          $ref: "#/components/schemas/player"
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - score
        - map_uid
        - player_login
    player:
      type: object
      properties:
        login:
          type: string
        nick:
          type: string
        banned:
          type: boolean
        auto_upload_replay:
          type: boolean
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - login
        - nick
    map:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        created_at:
          $ref: "#/components/schemas/date-time"
        updated_at:
          $ref: "#/components/schemas/date-time"
      required:
        - uid
        - name
    date-time:
      type: string
      format: date-time
      description: unix timestamp
      example: 1639075065
